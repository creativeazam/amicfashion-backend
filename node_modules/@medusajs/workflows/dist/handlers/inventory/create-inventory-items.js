"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createInventoryItems = void 0;
async function createInventoryItems({ container, context, data, }) {
    const inventoryService = container.resolve("inventoryService");
    if (!inventoryService) {
        const logger = container.resolve("logger");
        logger.warn(`Inventory service not found. You should install the @medusajs/inventory package to use inventory. The 'createInventoryItems' will be skipped.`);
        return void 0;
    }
    const variants = data.products.reduce((acc, product) => {
        return acc.concat(product.variants);
    }, []);
    const result = await Promise.all(variants.map(async (variant) => {
        if (!variant.manage_inventory) {
            return;
        }
        const inventoryItem = await inventoryService.createInventoryItem({
            sku: variant.sku,
            origin_country: variant.origin_country,
            hs_code: variant.hs_code,
            mid_code: variant.mid_code,
            material: variant.material,
            weight: variant.weight,
            length: variant.length,
            height: variant.height,
            width: variant.width,
        }, {
            transactionManager: (context.transactionManager ??
                context.manager),
        });
        return { variant, inventoryItem };
    }));
    return result.filter(Boolean);
}
exports.createInventoryItems = createInventoryItems;
createInventoryItems.aliases = {
    products: "products",
};
//# sourceMappingURL=create-inventory-items.js.map