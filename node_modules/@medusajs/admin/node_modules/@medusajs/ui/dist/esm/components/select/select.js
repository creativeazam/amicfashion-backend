"use client";
import { CheckMini, ChevronUpDown, EllipseMiniSolid, MagnifyingGlassMini, XMarkMini, } from "@medusajs/icons";
import * as DropdownPrimitive from "@radix-ui/react-dropdown-menu";
import { useSelect, } from "downshift";
import { isEqual, throttle } from "lodash";
import * as React from "react";
import { Badge } from "../badge";
import { clx } from "../../utils/clx";
const ALLOWED_SEARCH_KEYDOWN_CODES = ["Enter", "Escape", "ArrowUp", "ArrowDown"];
const SCROLL_TOLERANCE = 30;
export const SelectContext = React.createContext(null);
export const useSelectContext = () => {
    const context = React.useContext(SelectContext);
    if (context === null)
        throw new Error("useSelectContext must be used within a Select.Root or SelectContext Provider");
    return context;
};
const multiStateReducer = (state, actionAndChanges) => {
    const { changes, type } = actionAndChanges;
    switch (type) {
        case useSelect.stateChangeTypes.ItemClick:
            return {
                ...changes,
                isOpen: true,
                highlightedIndex: state.highlightedIndex,
            };
        default:
            return changes;
    }
};
const Root = ({ children, multi = false, onChange, search = false, onSearch = () => { }, onScrollToBottom = () => { }, ...props }) => {
    // All items. Inferred internally from Item
    const [items, setItems] = React.useState([]);
    // Selected items, used for multiselects
    const [selectedItems, setSelectedItems] = React.useState([]);
    // Simple inferred state if all items are selected, used for SelectAll display logic
    const allSelected = selectedItems.length === items.length;
    // Helpers for inferring all items for select
    const addItem = (item) => setItems((items) => [...items, item]);
    const removeItem = (item) => setItems((items) => items.filter((existingItem) => !isEqual(existingItem, item)));
    // onChange trigger for multiselect contexts
    React.useEffect(() => {
        if (multi)
            onChange(selectedItems);
    }, [selectedItems, onChange, multi]);
    // Simple props for combobox hook
    const selectProps = {
        items,
        onSelectedItemChange: ({ selectedItem }) => {
            if (selectedItem)
                onChange(selectedItem);
        },
    };
    // Quick way to clear all multi-selected items. Used in trigger and by SelectAll
    const clearSelectedItems = () => {
        setSelectedItems([]);
    };
    // action for SelectALl component or other custom impl.
    const selectAll = allSelected
        ? () => {
            clearSelectedItems();
        }
        : () => {
            setSelectedItems(items);
        };
    // Listener for when downshift's dropdown open state changes
    const onOpenChange = (open) => {
        // If the menu is closing, trigger a search clear.
        // The input clears on unmount, but any external filtering logic won't know that it should likely unfilter
        if (!open)
            onSearch("");
    };
    // Custom action when an item is selected in a multiselect context
    const onMultiSelectedItemChange = ({ selectedItem, }) => {
        if (!selectedItem)
            return;
        const index = selectedItems.findIndex((existingItem) => existingItem.value === selectedItem.value);
        if (index > 0) {
            setSelectedItems([
                ...selectedItems.slice(0, index),
                ...selectedItems.slice(index + 1),
            ]);
        }
        else if (index === 0) {
            setSelectedItems([...selectedItems.slice(1)]);
        }
        else {
            setSelectedItems([...selectedItems, selectedItem]);
        }
    };
    // Change props for combobox hook if in multi context
    if (multi) {
        selectProps.stateReducer = multiStateReducer;
        selectProps.selectedItem = null;
        selectProps.onSelectedItemChange = onMultiSelectedItemChange;
    }
    const selectReturn = useSelect(selectProps);
    return (React.createElement(DropdownPrimitive.Root, { ...props, modal: false, onOpenChange: onOpenChange },
        React.createElement(SelectContext.Provider, { value: {
                multi,
                selectedItems,
                clearSelectedItems,
                selectAll,
                allSelected,
                search,
                onSearch,
                addItem,
                removeItem,
                onScrollToBottom: throttle(onScrollToBottom, 500),
                ...selectReturn,
            } }, children)));
};
Root.displayName = "Select.Root";
const Trigger = React.forwardRef(({ className, children, size = "regular", disabled, ...props }, ref) => {
    const { getToggleButtonProps, selectedItem, search } = useSelectContext();
    const { ref: toggleButtonRef, ...toggleButtonProps } = getToggleButtonProps({
        disabled,
        ref,
    });
    return (React.createElement(DropdownPrimitive.Trigger, { ref: toggleButtonRef, asChild: true, className: clx("bg-ui-bg-subtle border-ui-border-loud-muted text-ui-fg-base shadow-buttons-secondary txt-compact-medium group/trigger relative z-10 flex h-10 w-full cursor-pointer items-center rounded-md border px-3 py-[9px] transition-all", "hover:bg-ui-bg-subtle-hover", {
            "focus:border-ui-fg-interactive focus:shadow-borders-active focus:outline-none": !disabled,
        }, "data-[placeholder=true]:text-ui-fg-muted", "data-[state=open]:border-ui-fg-interactive data-[state=open]:shadow-borders-active", "data-[disabled]:bg-ui-bg-disabled data-[disabled]:text-ui-fg-disabled data-[placeholder]:data-[disabled]:text-ui-fg-disabled data-[disabled]:cursor-not-allowed", { "h-8 px-2 py-2 text-sm": size === "small" }, { "pl-10": search }, className), "data-placeholder": !selectedItem, ...props, ...toggleButtonProps },
        React.createElement("div", null,
            search && (React.createElement("div", { className: "text-ui-fg-muted absolute left-3 flex h-5 w-5 items-center justify-center" }, React.createElement(MagnifyingGlassMini, null))),
            children)));
});
Trigger.displayName = "Select.Trigger";
const TriggerIcon = ({ className, children, ...props }) => (React.createElement("div", { className: clx("text-ui-fg-muted group-data-[disabled]/trigger:text-ui-fg-disabled z-10 ml-auto", className), ...props }, children ? children : React.createElement(ChevronUpDown, null)));
TriggerIcon.displayName = "Select.TriggerIcon";
const Value = ({ children, placeholder = "", value }) => {
    const { selectedItem, multi, selectedItems, clearSelectedItems, search, isOpen, onSearch, } = useSelectContext();
    if (search && isOpen)
        return React.createElement(SearchInput, { onChange: (e) => onSearch(e.target.value) });
    // If children are a complex element, render them directly
    if (children && typeof children !== "string")
        return React.createElement("div", null, children);
    // If there's a truthy value prop, render it
    if (value)
        return React.createElement("div", null, value);
    // If neither a single item nor multiple items are selected, render placeholder
    if (!selectedItem && !(selectedItems === null || selectedItems === void 0 ? void 0 : selectedItems.length))
        return React.createElement("div", null, placeholder);
    // If we're in a multi select and have some selected items
    if (multi && selectedItems)
        return (React.createElement("div", { className: "text-ui-fg-base" },
            React.createElement(Badge, { className: "relative z-20 mr-1", onClick: () => clearSelectedItems() },
                selectedItems.length,
                " ",
                React.createElement(XMarkMini, null)),
            "Selected"));
    // Else just render the label on the selected item
    return React.createElement("div", null, selectedItem.label);
};
const Content = React.forwardRef(({ children, className, ...props }, ref) => {
    const innerRef = React.useRef(null);
    const firstMount = React.useRef(true);
    React.useImperativeHandle(ref, () => innerRef.current);
    const { getMenuProps, onScrollToBottom, isOpen } = useSelectContext();
    const { ref: menuRef, ...menuProps } = getMenuProps({ ref: innerRef });
    const handleScroll = React.useCallback(() => {
        if (innerRef.current) {
            const div = innerRef.current;
            if (div.scrollHeight - div.scrollTop <=
                div.clientHeight + SCROLL_TOLERANCE) {
                onScrollToBottom();
            }
        }
    }, []);
    React.useEffect(() => {
        if (innerRef.current) {
            innerRef.current.addEventListener("scroll", handleScroll);
            const isScrollable = innerRef.current.scrollHeight > innerRef.current.clientHeight;
            if (!isScrollable && firstMount.current) {
                firstMount.current = false;
                onScrollToBottom();
            }
        }
        return () => { var _a; return (_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.removeEventListener("scroll", handleScroll); };
    }, [innerRef.current, handleScroll]);
    return (React.createElement(DropdownPrimitive.Content, { ref: menuRef, className: clx("bg-ui-bg-base shadow-elevation-flyout relative z-50 w-full min-w-[8rem] overflow-auto rounded-lg", "data-[state=open]:animate-in data-[state=open]:fade-in-0", "data-[state=closed]:animate-out data-[state=closed]:fade-out-0", "data-[side=bottom]:translate-y-2 data-[side=left]:-translate-x-2 data-[side=right]:translate-x-2 data-[side=top]:-translate-y-2", "max-h-[200px] w-full min-w-[var(--radix-dropdown-menu-trigger-width)]", { hidden: !isOpen }, className), ...props, ...menuProps, forceMount: true, "data-state": isOpen ? "open" : "closed" }, children));
});
Content.displayName = "Select.Content";
const Item = React.forwardRef(({ className, children, item, ...props }, ref) => {
    const { getItemProps, selectedItem, selectItem, multi, selectedItems, addItem, removeItem, } = useSelectContext();
    const { ref: itemRef, ...itemProps } = getItemProps({ item, ref });
    React.useEffect(() => {
        addItem(item);
        return () => removeItem(item);
    }, [item]);
    const isSelected = (selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.value) === item.value ||
        !!(selectedItems === null || selectedItems === void 0 ? void 0 : selectedItems.find((selectedItem) => selectedItem.value === item.value));
    return (React.createElement(DropdownPrimitive.Item, { ref: itemRef, className: clx("relative flex w-full cursor-default select-none items-center rounded-md py-2 pl-10 pr-3 text-sm", "hover:bg-ui-bg-base-hover", "focus:bg-ui-bg-base-hover focus:outline-none", "data-[disabled]:text-ui-fg-disabled data-[disabled]:cursor-not-allowed data-[disabled]:hover:bg-transparent", { "font-medium": isSelected }, className), ...props, ...itemProps, onClick: (e) => {
            if (multi)
                e.preventDefault();
            if (selectItem)
                selectItem(item);
            if (itemProps.onClick)
                itemProps.onClick(e);
        }, 
        // These need to be prevented else Radix triggers focus on the item, which blurs the search input
        onPointerMove: (e) => e.preventDefault(), onPointerLeave: (e) => e.preventDefault() },
        isSelected && (React.createElement("div", { className: "absolute left-3 flex h-5 w-5 items-center justify-center" }, multi ? React.createElement(CheckMini, null) : React.createElement(EllipseMiniSolid, null))),
        children));
});
Item.displayName = "Select.Item";
const Separator = React.forwardRef(({ className, ...props }, ref) => (React.createElement(DropdownPrimitive.Separator, { ref: ref, className: clx("bg-ui-border-base -mx-1 my-1 h-px", className), ...props })));
Separator.displayName = "Select.Separator";
const SelectAll = ({ children, className, ...props }) => {
    const { multi, selectAll, allSelected } = useSelectContext();
    if (!multi) {
        console.error('Select.SelectAll can only be used within a Select with multi="true"');
        return null;
    }
    return (React.createElement("div", { className: clx("relative flex w-full cursor-default select-none items-center rounded-md py-2 pl-10 pr-3 text-sm", "hover:bg-ui-bg-base-hover", "focus:outline-none", className), onClick: (e) => {
            e.preventDefault();
            selectAll();
        }, 
        // Prevent this, else the search input becomes unfocused
        onMouseDown: (e) => e.preventDefault(), ...props },
        allSelected && (React.createElement("div", { className: "absolute left-3 flex h-5 w-5 items-center justify-center" },
            React.createElement(EllipseMiniSolid, null))),
        children ? children : "All"));
};
SelectAll.displayName = "Select.SelectAll";
const SearchInput = React.forwardRef(({ className, ...props }, ref) => {
    const innerRef = React.useRef(null);
    React.useImperativeHandle(ref, () => innerRef.current);
    return (React.createElement("input", { ref: innerRef, className: clx("caret-ui-fg-base txt-compact-medium text-ui-fg-base max-w-[90%] bg-transparent focus:outline-none", className), placeholder: "Find something", 
        // Stop this else downshift focuses first matching element, for a11y
        onKeyDown: (e) => {
            if (!ALLOWED_SEARCH_KEYDOWN_CODES.includes(e.code)) {
                e.stopPropagation();
            }
            if ((e.code === "ArrowDown" || e.code === "ArrowUp") &&
                (innerRef === null || innerRef === void 0 ? void 0 : innerRef.current))
                innerRef.current.blur();
        }, 
        // Prevented else Radix closes the menu when this gains focus
        onFocus: (e) => e.stopPropagation(), autoFocus: true, ...props }));
});
SearchInput.displayName = "Select.SearchInput";
const Search = React.forwardRef(({ icon, ...props }, ref) => {
    return (React.createElement("div", { className: "txt-compact-medium relative flex items-center px-3 py-2 pl-10" },
        React.createElement("div", { className: "text-ui-fg-muted absolute left-3 flex h-5 w-5 items-center justify-center" }, icon ? icon : React.createElement(MagnifyingGlassMini, null)),
        React.createElement(SearchInput, { ...props, ref: ref })));
});
Search.displayName = "Select.Search";
const Label = React.forwardRef(({ className, ...props }, ref) => (React.createElement(DropdownPrimitive.Label, { ref: ref, className: clx("text-ui-fg-subtle txt-compact-xsmall-plus px-2 py-1.5", className), ...props })));
Label.displayName = "Select.Label";
const Select = Object.assign(Root, {
    Trigger,
    TriggerIcon,
    Value,
    Content,
    Item,
    Separator,
    SelectAll,
    Label,
});
export { Select };
//# sourceMappingURL=select.js.map